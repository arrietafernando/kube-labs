Red Team Kubernetes:

minikube start

docker run -it --rm --network host aquasec/kube-hunter

https://github.com/aquasecurity/kube-hunter

Elegir 1 y poner la minikube ip o elegir el punto 2

curl -k https://192.168.49.2:8443/api/v1

kubectl apply -f https://raw.githubusercontent.com/diegochavezcarro/kube-labs/main/deploy.yml
kubectl get pods
kubectl apply -f https://raw.githubusercontent.com/diegochavezcarro/kube-labs/main/svc.yml
kubectl get svc
Probar en un browser, obteniendo la minikube ip:
http://192.168.49.2:30001/

kubectl exec -it hello-deploy-57844dd6f7-4mnsm -- sh

cat /var/run/secrets/kubernetes.io/serviceaccount/token

export TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`

curl -k -H "Authorization: Bearer $TOKEN"  https://kubernetes/api/v1

Afuera de ese pod:

curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:8443/api/v1

curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:8443/api/v1/namespaces/default/pods

curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:8443/healthz

kubectl get secrets 
kubectl describe secret defaultsec
Con un kube mas viejo es posible:
minikube start --kubernetes-version=v1.19.2

Probar acceso a etcd:
curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:2379/version/

Probar acceso al del kubelet /metrics y /pods
curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:10250/metrics
curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:10250/pods

Para mas contexto probemos crear un Service Account con permisos de cluster admin, y un secret con un token:
kubectl create serviceaccount admin-user

kubectl create clusterrolebinding admin-user-binding \
  --clusterrole cluster-admin \
  --serviceaccount default:admin-user
  
cat <<EOF | kubectl create -f -
apiVersion: v1
kind: Secret
metadata:
  name: admin-user-token
  annotations:
    kubernetes.io/service-account.name: admin-user
type: kubernetes.io/service-account-token
EOF

kubectl get secrets
kubectl describe secrets admin-user-token
Copiar el token y usarlo:

curl -k -H "Authorization: Bearer $TOKEN" https://192.168.49.2:8443/api/v1/namespaces/default/pods
curl -k -H "Authorization: Bearer $TOKEN" https://192.168.49.2:8443/api/v1/namespaces/default/secrets

curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:2379/version/

curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:10250/metrics
curl -k -H "Authorization: Bearer $TOKEN"  https://192.168.49.2:10250/pods

La forma mas correcta para crear un token es:

kubectl create token admin-user --duration 10m

De esa manera podemos configurar la expiracion del mismo. Ver
https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#manually-create-an-api-token-for-a-serviceaccount


Con respecto al kube-hunter, para tests activos agregarle al comando un --active
